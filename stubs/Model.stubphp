<?php

namespace Illuminate\Database\Eloquent;

use ArrayAccess;
use JsonSerializable;
use Illuminate\Contracts\Support\Jsonable;
use Illuminate\Contracts\Support\Arrayable;
use Illuminate\Contracts\Routing\UrlRoutable;
use Illuminate\Contracts\Queue\QueueableEntity;
use Illuminate\Support\Traits\ForwardsCalls;

/**
 * @implements \ArrayAccess<string, mixed>
 * @mixin Builder
 */
class Model implements ArrayAccess, Arrayable, Jsonable, JsonSerializable, QueueableEntity, UrlRoutable
{
    use Concerns\HasAttributes,
            Concerns\HasEvents,
            Concerns\HasGlobalScopes,
            Concerns\HasRelationships,
            Concerns\HasTimestamps,
            Concerns\HidesAttributes,
            Concerns\GuardsAttributes,
            ForwardsCalls;

    /**
     * @param  array|mixed  $columns
     * @return Collection
     */
    public static function all($columns = ['*']) { }

    /**
     * @return Builder
     */
    public static function query() { }

    /**
     * @return Builder
     */
    public function newQuery() { }

    /**
     * @return Builder
     */
    public function newModelQuery() { }

    /**
     * @return Builder
     */
    public function newQueryWithoutRelationships() { }

    /**
     * @param Builder $builder
     * @return Builder
     */
    public function registerGlobalScopes($builder) { }

    /**
     * @return Builder
     */
    public function newQueryWithoutScopes() { }

    /**
     * Get a new query instance without a given scope.
     *
     * @param Scope|string  $scope
     * @return Builder
     */
    public function newQueryWithoutScope($scope) { }

    /**
     * @param  array|int  $ids
     * @return Builder
     */
    public function newQueryForRestoration($ids) { }

    /**
     * @param  \Illuminate\Database\Query\Builder  $query
     * @return Builder
     */
    public function newEloquentBuilder($query) { }

    // Arrayable.

    /**
     * @inheritDoc
     */
    public function toArray()
    {
    }

    // ArrayAccess.

    /**
     * @inheritDoc
     */
    public function offsetExists($offset)
    {
    }

    /**
     * @inheritDoc
     */
    public function offsetGet($offset)
    {
    }

    /**
     * @inheritDoc
     */
    public function offsetSet($offset, $value)
    {
    }

    /**
     * @inheritDoc
     */
    public function offsetUnset($offset)
    {
    }

    // Jsonable.

    /**
     * @inheritDoc
     */
    public function toJson($options = 0)
    {
    }

    // JsonSerializable.

    /**
     * @inheritDoc
     */
    public function jsonSerialize()
    {
    }

    // QueueableEntity.

    /**
     * @inheritDoc
     */
    public function getQueueableId()
    {
    }

    /**
     * @inheritDoc
     */
    public function getQueueableRelations()
    {
    }

    /**
     * @inheritDoc
     */
    public function getQueueableConnection()
    {
    }

    // UrlRoutable.

    /**
     * @inheritDoc
     */
    public function getRouteKey()
    {
    }

    /**
     * @inheritDoc
     */
    public function getRouteKeyName()
    {
    }

    /**
     * @inheritDoc
     */
    public function resolveRouteBinding($value, $field = null)
    {
    }

    /**
     * @inheritDoc
     */
    public function resolveChildRouteBinding($childType, $value, $field)
    {
    }
}
